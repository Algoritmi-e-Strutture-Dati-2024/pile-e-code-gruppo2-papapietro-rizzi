#include <iostream>
#include <stdexcept>

template <typename T>
class Coda {
  private:
    ListaPuntatori<T> lista;

  public:
    void enqueue(T elem) {
        lista.inslista(elem, lista.lunghezza() + 1); /*Inserire l'elemento in fondo alla lista*/
    }

    /*Rimuove l'elemento in testa alla coda e lo restituisce*/
    T dequeue() {
        if (isEmpty()) {
            throw std::out_of_range("Errore: coda vuota.");
        }
        T frontElem = lista.leggilista(1); /*Legge l'elemento in testa*/
        lista.canclista(1);               /*Rimuove l'elemento*/
        return frontElem;
    }

    /*Restituisce l'elemento in testa alla coda senza rimuoverlo*/
    T front() const {
        if (isEmpty()) {
            throw std::out_of_range("Errore: coda vuota.");
        }
        return lista.leggilista(1); /*Legge l'elemento in testa*/
    }

    /* Verifica se la coda Ã¨ vuota*/
    bool empty() const {
        return lista.listavuota(); 
    }

    /*Restituisce il numero di elementi nella coda*/
    int size() const {
        return lista.lunghezza(); 
    }
};

int main() {
    Coda<int> coda;

    try {
        coda.enqueue(4);
        coda.enqueue(8);
        coda.enqueue(12);

        std::cout << "Elemento in testa: " << coda.front() << std::endl; // 4
        std::cout << "Dimensione della coda: " << coda.size() << std::endl; // 3

        std::cout << "Rimuovo: " << coda.dequeue() << std::endl; // 4
        std::cout << "Rimuovo: " << coda.dequeue() << std::endl; // 8

        std::cout << "Elemento in testa: " << coda.front() << std::endl; // 12
        std::cout << "Dimensione della coda: " << coda.size() << std::endl; // 1

        coda.dequeue(); /*Rimuove l'ultimo elemento*/
    }

    return 0;
}

